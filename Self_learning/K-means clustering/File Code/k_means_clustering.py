# -*- coding: utf-8 -*-
"""K-Means Clustering

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1B5aSwkVDcwAvRghvMfIvxZMSKCzc5na0
"""

#Import some libraries
import pandas as pd
import matplotlib.pyplot as plt

from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans

#Loading data
df = pd.read_csv('/force2020_data_unsupervised_learning.csv', index_col = 'DEPTH_MD')
#Show the data
df

df.dropna(inplace=True)
# This command removes all rows from the DataFrame 'df' that
# contain at least one missing value (NaN), and it modifies the DataFrame directly.
df

df.describe()
df

scaler = StandardScaler()
# This line of code creates an instance (an object) of the StandardScaler class from the scikit-learn (sklearn) library.
#This scaler object can then be used to standardize numerical features in your dataset.

df[['RHOB_T', 'NPHI_T','GR_T', 'PEF_T', 'DTC_T']] = scaler.fit_transform(df[['RHOB', 'NPHI', 'GR', 'PEF','DTC']])

df

#CLUSTERING THE DATA
#Create finction to work out optimim number of clusters
def optimise_k_means(data, max_k):
  means = []
  inertias = []

  for k in range (1, max_k):
    kmeans = KMeans(n_clusters=k)
    kmeans.fit(data)

    means.append(k)
    inertias.append(kmeans.inertia_)

  #Generate the elbow plot
  fig = plt.subplots(figsize=(10,5))
  plt.plot(means, inertias, 'o-')
  plt.xlabel('Number of Clusters')
  plt.ylabel('Inertia')
  plt.grid(True)
  plt.show()

optimise_k_means(df[['RHOB_T', 'NPHI_T']], 10)

#APPlying K-Means clustering
kmeans = KMeans(n_clusters=3)
kmeans.fit(df[['NPHI_T', 'RHOB_T']])

df['kmeans_3'] = kmeans.labels_
df

#Plotting the results
plt.scatter(x=df['NPHI'], y=df['RHOB'], c=df['kmeans_3'])
plt.xlim(-0.1, 1)
plt.ylim(3, 1.5)
plt.show()

#Create multiple clusters
for k in range (1, 6):
  kmeans = KMeans(n_clusters=k)
  kmeans.fit(df[['RHOB_T', 'NPHI_T']])
  df[f'kmeans_{k}'] = kmeans.labels_

df

fig, axs = plt.subplots(nrows = 1, ncols = 5, figsize=(20,5))

for i, ax in enumerate(fig.axes, start=1):
  ax.scatter(x=df['NPHI'], y=df['RHOB'], c=df[f'kmeans_{i}'])
  ax.set_ylim(3, 1.5)
  ax.set_xlim(0, 1)
  ax.set_title(f'N clusters: {i}')